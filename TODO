Delayed:
    world.delay:
        [] createEntity(...comps)
        [] destroyEntity(entity)
        [] setComponent(entity, ...comps)
        [] updateComponent(entity, compFn)?
        [] removeComponent(entity, ...comps)
        [] set/update/remove Unique?
        [] set/update/remove Global?
        [] queueItem(item)
        [] emitTrigger(event)
        [] runSystem(fn: System | SystemFn)?
        [] runSystemSet(set, time?, delta?)?
    [] world.commitDelayed() -or- world.delay.commit()
        * Or world.commit();
    [] world.addCommitDelayed(set?, step?, order='post') -or- world.addCommit(set?, step?, order='post');

Triggers:
    [X] registerTrigger(comp extends Event, steps=['emit'])
    [X] addTriggerStep(comp, step, opts={})
    [X] addTrigger( step?, handler | fn)
    [X] emitTrigger(c)
        * Fires all registered systems synchronously
    [-] class Event
        [-] stopPropagation() - decided to use return code instead (true == stopPropagation)
    World Triggers:
        [-] WorldStartup?
            * instead of 'start'?  Seems unnecessary
            * Requires 'WorldInit'?  More complicated?
        [] WorldShutdown?
        [] ActivateLevel
        [] DeactivateLevel
        [-] StartScene?
            * Or ShowScene
        [-] StopScene?
        [] DeleteEntity
        [] CreateEntity

System:
    [] System implements WorldInit
    [] Change 'start' to 'worldInit'
    [] Track own delta?
        [] lastTime
        [] this.delta
        [] System.run -> remove delta

Bundles:
    [X] How to do this?
    [X] class Bundle {}?
        [X] create(world) -> Entity
        [-] name? id?
    [X] createBundle(...args: x[]) -> Bundle
        [X] AnyComponent
        [X] ComponentFn: (world) => T
        [X] ComponentObj: { [id:string]: AnyComponent | ComponentFn }
    [X] World.create(...args)
        [X] AnyComponent[] - current
        [X] AnyBundle
    [] Bundles that use other bundles
    [] world.create that uses any combo of components and/or bundles

World:
    [] init -> onStartup(sys: System | SystemFn)
        * this.addEventSystem(WorldStartup, sys)
    [] onShutdown(sys: System | SystemFn)
        * this.addEventSystem(WorldShutdown, sys)
    [] addStoreWatcher(comp, fn)
        * fn: (world: World, store: CompStore<C>) -> StoreWatcher<C>
        * addComponentWatcher?
    [] expectUnique
    [] ensureUnique
    [] expectGlobal
    [] ensureGlobal
    [] world.entities() -vs- world.level.entities()
        * The accessing of level should not be required
        * world.allEntities() vs world.entities()?
    auto register:
        [] world.autoRegisterComponents()
        [] world.autoRegisterQueues()
        [] world.autoRegisterEvents()
        [] world.autoRegisterTriggers()
        [] world.autoRegister() -- all of the above
    [] runDelta -> addTime + runSystems
    [] maintain -> commit + maintainQueues

Uniques+Globals:
    [] track update?
    [] isUpdated(comp, ticks)?

SystemSet:
    What is default step if you supply custom steps?:
        [X] First?
        [] Marker in text? '!'?
    [] Can you change default step in: addSystemStep(set, step)?
        * AddStepOpts: { default?: true }
    [] By default commits at the end of last step
    [] How to turn off auto commit at end of last step
    [] lastTick - update this on run
    [] Should **NOT** be a System
        Just system-like
    [] Track own delta?
        [] lastTime

SystemStep:
    [] Allow marking step as doing commit after it finishes
        * AddStepOpts: { commit?: true | SystemOrder }
        * true = 'post'
    [] lastTick - upate this on run
    [] Should **NOT** be a System
        Just system-like
    [] Track own delta?
        [] lastTime

PosManager:
    [] Work with XY in addition to X, Y

MultiWorld:
    [] Store `notify` in a MultiWorld needs to be tested/updated
        * Only one register should be required
    
Entity:
    [] Should `tags` be a standard part of `Entity`?
    [] Could be integrated into `Aspect`
        * If separate, then this isn't realistic
    [] Track `createTick` instead of `gen`
        [] Rebase as necessary
    [-] Track `deleteTick` - too complicated with releasing components

Aspect:
    [] Allow test functions in `with`, `without`, `one`, and `some`.
        * (entity) => boolean
    [] Allow: .created() to test `createTick` vs sinceTick
        * Systems can find new entities    

Collisions:
    [] callback - (actor, target, world) -> (world, actor, target)
        * More consistent with other APIs

Queues:
    [] world.maintainQueue(comp)
    [] world.maintainQueues()

Rollup:
    [] Rollup to gw-ecs.*

Docs:
    [] Examples 
    [] interactive manual
    [] typedoc?